name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            target/*.jar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: target
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Test with Maven
        run: mvn -B test --file pom.xml

  javadoc:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Generate Javadoc
        run: mvn -B javadoc:javadoc --file pom.xml
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./target/site/apidocs
          publish_branch: gh-pages
          force_orphan: true
          enable_jekyll: true
          cname: javadoc.example.com

  deploy:
    needs: javadoc
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: target

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "adding host to known hosts on runner os"
          echo "${{ secrets.SSH_HOST_PUBLIC_KEY }}" >> ~/.ssh/known_hosts
          echo "boom"

      - name: List target directory
        run: |
          echo "running ls -al target on runner os"
          ls -al target
          echo "boom"

      - name: Prepare SSH key
        run: |
          echo "Creating a temporary file for the private key..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa_tmp
          chmod 600 id_rsa_tmp

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "1. Current known hosts:"
            cat ~/.ssh/known_hosts
            echo "boom"
            echo "2. Adding host to known hosts..."
            ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
            echo "boom"
            echo "3. Current known hosts:"
            cat ~/.ssh/known_hosts
            echo "boom"

            echo "5. Testing SSH connection..."
            ssh -o StrictHostKeyChecking=no -vvv -i id_rsa_tmp ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo Connection successful with key"
            echo "boom"
            echo "6. running ls on runner os"
            ls
            echo "boom"
            echo "7. scp to server with runner os key file..."
            scp -i id_rsa_tmp -o StrictHostKeyChecking=no target/*.jar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}
            echo "boom"

      - name: Copy files to server
        run: |
          echo "booming"
          echo "boom"

      - name: Start application on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ./id_rsa_tmp
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "8. Starting application..."
            nohup java -jar /home/${{ secrets.SSH_USER }}/blockchain-api-0.0.1-SNAPSHOT.jar > /home/${{ secrets.SSH_USER }}/api.log 2>&1 &
            echo "boom"

      - name: Cleanup
        run: |
          echo "9. Removing temporary file for the private key..."
          rm id_rsa_tmp
          echo "boom"
